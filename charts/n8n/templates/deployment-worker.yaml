{{- if and (not .Values.worker.forceToUseStatefulset) (or (not .Values.worker.persistence.enabled) (and .Values.worker.persistence.enabled (or (and (eq (int .Values.worker.count) 1) (not .Values.worker.autoscaling.enabled) ) (eq .Values.worker.persistence.accessMode "ReadWriteMany")) )) }}
{{- if and (eq .Values.db.type "postgresdb") (eq .Values.worker.mode "queue") }}
apiVersion: apps/v1
{{- if .Values.worker.allNodes }}
kind: DaemonSet
{{- else }}
kind: Deployment
{{- end }}
metadata:
  name: {{ include "n8n.worker.fullname" . }}
  labels:
    {{- include "n8n.worker.labels" . | nindent 4 }}
spec:
  {{- if and .Values.worker.allNodes (eq .Values.strategy.type "RollingUpdate") }}
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: {{ .Values.strategy.rollingUpdate.maxUnavailable }}
  {{- else }}
  {{- if not .Values.worker.autoscaling.enabled }}
  replicas: {{ .Values.worker.count }}
  {{- end }}
  strategy:
    type: {{ .Values.strategy.type }}
    {{- if eq .Values.strategy.type "RollingUpdate" }}
    rollingUpdate:
      maxUnavailable: {{ .Values.strategy.rollingUpdate.maxUnavailable }}
      maxSurge: {{ .Values.strategy.rollingUpdate.maxSurge }}
    {{- end }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "n8n.worker.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      {{- if eq .Values.taskRunners.mode "external" }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
      {{- end }}
      {{- if .Values.nodes.external.packages }}
        checksum/packages: {{ (join "," .Values.nodes.external.packages) | sha256sum }}
      {{- end }}
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "n8n.worker.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "n8n.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- with .Values.worker.hostAliases }}
      hostAliases:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.worker.runtimeClassName }}
      runtimeClassName: {{ .Values.worker.runtimeClassName }}
      {{- end }}
      {{- if or .Values.worker.waitMainNodeReady.enabled .Values.nodes.external.packages .Values.worker.initContainers  }}
      initContainers:
      {{- end }}
        {{- if .Values.worker.waitMainNodeReady.enabled }}
        - name: wait-for-main
          image: busybox:1.36
          command: ["/bin/sh", "-c"]
          args:
          {{- $overwriteSchema := default (default "http" (get .Values.main.extraEnvVars "N8N_PROTOCOL")) .Values.worker.waitMainNodeReady.overwriteSchema }}
          {{- $overwriteUrl := default (printf "%s.%s.svc.cluster.local:%d" (include "n8n.fullname" .) .Release.Namespace (.Values.service.port | int)) .Values.worker.waitMainNodeReady.overwriteUrl }}
          {{- $healthCheckPath := default "/healthz" .Values.worker.waitMainNodeReady.healthCheckPath }}
          {{- $additionalParameters := printf "--spider %s" (join " " .Values.worker.waitMainNodeReady.additionalParameters) | trimSuffix " " }}
          - |
            until wget -q {{ $additionalParameters }} {{ $overwriteSchema }}://{{ $overwriteUrl }}{{ $healthCheckPath }}; do
              echo "Waiting for main node to be ready..."
              sleep 2
            done
          resources:
            requests:
              cpu: "10m"
              memory: "16Mi"
            limits:
              cpu: "100m"
              memory: "64Mi"
        {{- end }}
        {{- if .Values.nodes.external.packages }}
        - name: npm-install
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.nodes.initContainer.image.repository }}:{{ .Values.nodes.initContainer.image.tag }}"
          imagePullPolicy: {{ .Values.nodes.initContainer.image.pullPolicy }}
          command: ["/bin/sh", "-c"]
          args:
            - |
              {{- include "n8n.npmInstallScript" . | nindent 14 }}
          volumeMounts:
            {{- if .Values.npmRegistry.enabled }}
            - name: npmrc
              mountPath: "/home/node/.npmrc"
              subPath: {{ (default "npmrc" .Values.npmRegistry.secretKey) | quote }}
              readOnly: true
            {{- end }}
            - name: {{ default "node-modules" .Values.worker.persistence.volumeName }}
              mountPath: "/npmdata"
              readOnly: false
            - name: community-node-modules
              mountPath: "/nodesdata/nodes"
              readOnly: false
          {{- with .Values.nodes.initContainer.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
        {{- end }}
      {{- with .Values.worker.initContainers }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ include "n8n.worker.name" . }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["n8n"]
          args: ["worker", "--concurrency={{ .Values.worker.concurrency }}"]
          ports:
            - name: {{ .Values.service.name }}
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          startupProbe:
            {{- toYaml .Values.worker.startupProbe | nindent 12 }}
          livenessProbe:
            {{- $rootLiveness := .Values.livenessProbe | default dict }}
            {{- $workerLiveness := .Values.worker.livenessProbe | default dict }}
            {{- toYaml (merge $workerLiveness $rootLiveness) | nindent 12 }}
          readinessProbe:
            {{- $rootReadiness := .Values.readinessProbe | default dict }}
            {{- $workerReadiness := .Values.worker.readinessProbe | default dict }}
            {{- toYaml (merge $workerReadiness $rootReadiness) | nindent 12 }}
          resources:
            {{- toYaml (default .Values.resources .Values.worker.resources) | nindent 12 }}
          env:
            - name: N8N_HIRING_BANNER_ENABLED
              value: "false"
            - name: NODE_ENV
              value: production
            - name: N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS
              value: "true"
            - name: N8N_PORT
              value: {{ .Values.service.port | quote }}
            - name: N8N_DEFAULT_LOCALE
              value: {{ .Values.defaultLocale | quote }}
            - name: GENERIC_TIMEZONE
              value: {{ .Values.timezone | quote }}
            - name: N8N_GRACEFUL_SHUTDOWN_TIMEOUT
              value: {{ .Values.gracefulShutdownTimeout | quote }}
            - name: N8N_DISABLE_UI
              value: "true"
            - name: QUEUE_HEALTH_CHECK_ACTIVE
              value: "true"
            - name: N8N_CONCURRENCY_PRODUCTION_LIMIT
              value: {{ .Values.worker.concurrency | quote }}
            - name: DB_POSTGRESDB_USER
              value: {{ include "n8n.postgresql.username" . }}
            - name: DB_POSTGRESDB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ default (include "n8n.postgresql.fullname" .) .Values.externalPostgresql.existingSecret }}
              {{- if .Values.postgresql.auth.username }}
                  key: password
              {{- else }}
                  key: postgres-password
              {{- end }}
                  optional: true
            - name: QUEUE_BULL_REDIS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ default (include "n8n.redis.fullname" .) .Values.externalRedis.existingSecret }}
                  key: redis-username
                  optional: true
            - name: QUEUE_BULL_REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ default (include "n8n.redis.fullname" .) .Values.externalRedis.existingSecret }}
                  key: redis-password
                  optional: true
          {{- if eq .Values.taskRunners.mode "external" }}
            - name: N8N_RUNNERS_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ template "n8n.taskRunners.fullname" . }}-secret
                  key: worker-auth-token
          {{- end }}
          {{- if has "s3" .Values.binaryData.availableModes }}
            - name: N8N_EXTERNAL_STORAGE_S3_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                {{- if and .Values.minio.enabled (eq (len .Values.minio.users) 0) }}
                  name: {{ template "n8n.fullname" . }}-minio
                  key: rootUser
                {{- else }}
                  name: {{ default (printf "%s-s3-secret" (include "n8n.fullname" .)) .Values.binaryData.s3.existingSecret }}
                  key: access-key-id
                {{- end }}
            - name: N8N_EXTERNAL_STORAGE_S3_ACCESS_SECRET
              valueFrom:
                secretKeyRef:
                {{- if and .Values.minio.enabled (eq (len .Values.minio.users) 0) }}
                  name: {{ template "n8n.fullname" . }}-minio
                  key: rootPassword
                {{- else }}
                  name: {{ default (printf "%s-s3-secret" (include "n8n.fullname" .)) .Values.binaryData.s3.existingSecret }}
                  key: secret-access-key
                {{- end }}
          {{- end }}
          {{- if and .Values.nodes.builtin.enabled (eq .Values.taskRunners.mode "internal") }}
            - name: NODE_FUNCTION_ALLOW_BUILTIN
              value: {{ if .Values.nodes.builtin.modules }}{{ join "," .Values.nodes.builtin.modules }}{{ else }}"*"{{ end }}
          {{- end }}
          {{- if and .Values.nodes.external.allowAll (eq .Values.taskRunners.mode "internal") }}
            - name: NODE_FUNCTION_ALLOW_EXTERNAL
              value: "*"
          {{- else if and .Values.nodes.external.packages (eq .Values.taskRunners.mode "internal") }}
            - name: NODE_FUNCTION_ALLOW_EXTERNAL
              value: {{ include "n8n.packageNames" .Values.nodes.external.packages | quote }}
          {{- end }}
          {{- if and .Values.nodes.external.reinstallMissingPackages (eq .Values.taskRunners.mode "internal") }}
            - name: N8N_REINSTALL_MISSING_PACKAGES
              value: "true"
          {{- end }}
          {{- range $key, $value := (default .Values.extraEnvVars .Values.worker.extraEnvVars) }}
            - name: {{ upper $key }}
              value: {{ $value | quote }}
          {{- end }}
          envFrom:
            - configMapRef:
                name: {{ template "n8n.fullname" . }}-database-configmap
            - configMapRef:
                name: {{ template "n8n.fullname" . }}-logging-configmap
            - configMapRef:
                name: {{ template "n8n.fullname" . }}-diagnostics-configmap
            - configMapRef:
                name: {{ template "n8n.fullname" . }}-version-notifications-configmap
            - configMapRef:
                name: {{ template "n8n.fullname" . }}-public-api-configmap
            - configMapRef:
                name: {{ template "n8n.fullname" . }}-queue-configmap
            - configMapRef:
                name: {{ template "n8n.fullname" . }}-task-broker-configmap
            - configMapRef:
                name: {{ template "n8n.fullname" . }}-metrics-configmap
            - configMapRef:
                name: {{ template "n8n.fullname" . }}-binary-data-configmap
          {{- if .Values.license.enabled }}
            - configMapRef:
                name: {{ template "n8n.fullname" . }}-license-configmap
            - secretRef:
                name: {{ default (printf "%s-license-activation-key" (include "n8n.fullname" .)) .Values.license.existingActivationKeySecret }}
          {{- end }}
            - secretRef:
                name: {{ default (printf "%s-encryption-key-secret-v2" (include "n8n.fullname" .)) .Values.existingEncryptionKeySecret }}
          {{- range (default .Values.extraSecretNamesForEnvFrom .Values.worker.extraSecretNamesForEnvFrom) }}
            - secretRef:
                name: {{ . }}
          {{- end }}
          {{- if or (eq (include "n8n.worker.hasVolumeMounts" .) "true") .Values.worker.persistence.enabled }}
          volumeMounts:
          {{- end }}
          {{- if and (or .Values.nodes.external.packages .Values.worker.persistence.enabled) (eq .Values.taskRunners.mode "internal") }}
            - name: {{ default "node-modules" .Values.worker.persistence.volumeName }}
              mountPath: {{ .Values.worker.persistence.mountPath }}
              {{- if .Values.worker.persistence.subPath }}
              subPath: {{ .Values.worker.persistence.subPath }}
              {{- end }}
              readOnly: false
          {{- end }}
          {{- if and .Values.nodes.external.packages (eq .Values.taskRunners.mode "internal") }}
            - name: community-node-modules
              mountPath: "/home/node/.n8n/nodes"
              readOnly: false
          {{- end }}
          {{- if eq (include "n8n.postgres.ssl.hasCA" .) "true" }}
            - name: pg-ssl-ca
              mountPath: /home/node/certs/ca/ca.crt
              subPath: ca.crt
              readOnly: true
          {{- end }}
          {{- if eq (include "n8n.postgres.ssl.hasCert" .) "true" }}
            - name: pg-ssl-cert
              mountPath: /home/node/certs/cert/cert.crt
              subPath: cert.crt
              readOnly: true
          {{- end }}
          {{- if eq (include "n8n.postgres.ssl.hasKey" .) "true" }}
            - name: pg-ssl-key
              mountPath: /home/node/certs/key/cert.key
              subPath: cert.key
              readOnly: true
          {{- end }}
          {{- with (default .Values.volumeMounts .Values.worker.volumeMounts) }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- if eq .Values.taskRunners.mode "external" }}
        - name: {{ template "n8n.taskRunners.name" . }}
          image: "{{ .Values.taskRunners.image.repository | default .Values.image.repository }}:{{ .Values.taskRunners.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/usr/local/bin/task-runner-launcher"]
          args: ["javascript"]
          ports:
            - name: http
              containerPort: {{ .Values.taskRunners.external.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
          resources:
            {{- toYaml .Values.taskRunners.external.resources | nindent 12 }}
          env:
            - name: N8N_RUNNERS_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ template "n8n.taskRunners.fullname" . }}-secret
                  key: worker-auth-token
          {{- if .Values.nodes.builtin.enabled }}
            - name: NODE_FUNCTION_ALLOW_BUILTIN
              value: {{ if .Values.nodes.builtin.modules }}{{ join "," .Values.nodes.builtin.modules }}{{ else }}"*"{{ end }}
          {{- end }}
          {{- if .Values.nodes.external.allowAll }}
            - name: NODE_FUNCTION_ALLOW_EXTERNAL
              value: "*"
          {{- else if .Values.nodes.external.packages }}
            - name: NODE_FUNCTION_ALLOW_EXTERNAL
              value: {{ include "n8n.packageNames" .Values.nodes.external.packages | quote }}
          {{- end }}
          {{- if .Values.nodes.external.reinstallMissingPackages }}
            - name: N8N_REINSTALL_MISSING_PACKAGES
              value: "true"
          {{- end }}
          envFrom:
            - configMapRef:
                name: {{ template "n8n.taskRunners.fullname" . }}-configmap
          {{- if or .Values.nodes.external.packages .Values.worker.persistence.enabled }}
          volumeMounts:
            - name: {{ default "node-modules" .Values.worker.persistence.volumeName }}
              mountPath: {{ .Values.worker.persistence.mountPath }}
              {{- if .Values.worker.persistence.subPath }}
              subPath: {{ .Values.worker.persistence.subPath }}
              {{- end }}
              readOnly: false
          {{- end }}
          {{- if .Values.nodes.external.packages }}
            - name: community-node-modules
              mountPath: "/home/node/.n8n/nodes"
              readOnly: false
          {{- end }}
      {{- end }}
      {{- with .Values.worker.extraContainers }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if or .Values.worker.persistence.enabled (eq (include "n8n.worker.hasVolumes" .) "true") }}
      volumes:
      {{- end }}
      {{- if .Values.worker.persistence.enabled }}
        - name: {{ default "node-modules" .Values.worker.persistence.volumeName }}
          persistentVolumeClaim:
            claimName: {{ default (include "n8n-worker.persistence.fullname" .) .Values.worker.persistence.existingClaim }}
      {{- else if .Values.nodes.external.packages }}
        - name: {{ default "node-modules" .Values.worker.persistence.volumeName }}
          emptyDir: {}
      {{- end }}
      {{- if .Values.nodes.external.packages }}
        - name: community-node-modules
          emptyDir: {}
      {{- end }}
      {{- if .Values.npmRegistry.enabled }}
        - name: npmrc
          secret:
            secretName: {{ default (printf "%s-npm-registry-secret" (include "n8n.fullname" .)) .Values.npmRegistry.secretName | quote }}
            optional: true
      {{- end }}
      {{- if eq (include "n8n.postgres.ssl.hasCA" .) "true" }}
        - name: pg-ssl-ca
          secret:
            secretName: {{ default (printf "%s-pg-ssl-ca" (include "n8n.fullname" .)) .Values.db.postgresdb.ssl.existingCertificateAuthorityFileSecret.name }}
            items:
              - key: {{ default "ca.crt" .Values.db.postgresdb.ssl.existingCertificateAuthorityFileSecret.key }}
                path: ca.crt
      {{- end }}
      {{- if eq (include "n8n.postgres.ssl.hasCert" .) "true" }}
        - name: pg-ssl-cert
          secret:
            secretName: {{ default (printf "%s-pg-ssl-cert" (include "n8n.fullname" .)) .Values.db.postgresdb.ssl.existingCertFileSecret.name }}
            items:
              - key: {{ default "cert.crt" .Values.db.postgresdb.ssl.existingCertFileSecret.key }}
                path: cert.crt
      {{- end }}
      {{- if eq (include "n8n.postgres.ssl.hasKey" .) "true" }}
        - name: pg-ssl-key
          secret:
            secretName: {{ default (printf "%s-pg-ssl-key" (include "n8n.fullname" .)) .Values.db.postgresdb.ssl.existingPrivateKeyFileSecret.name }}
            items:
              - key: {{ default "cert.key" .Values.db.postgresdb.ssl.existingPrivateKeyFileSecret.key }}
                path: cert.key
      {{- end }}
      {{- with (default .Values.volumes .Values.worker.volumes) }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with (default .Values.affinity .Values.worker.affinity) }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.dnsPolicy }}
      dnsPolicy: {{ .Values.dnsPolicy }}
      {{- end }}
      {{- with .Values.dnsConfig }}
      dnsConfig:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
{{- end }}
